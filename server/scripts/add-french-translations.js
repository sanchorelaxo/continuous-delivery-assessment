/**
 * Add French translations to existing questions in MongoDB
 * This script updates the database with proper French translations
 */

const { MongoClient } = require('mongodb');
require('dotenv').config({ path: '../../.env' });

const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/cd_assessment';
const dbName = 'cd_assessment';

// French translations for questions and options
const frenchTranslations = {
  // Build Management
  BM1: {
    text: "Impl√©mentation du Contr√¥le de Version",
    options: [
      "Aucun syst√®me de contr√¥le de version en place",
      "Contr√¥le de version de base (ex. Git) avec code et scripts stock√©s",
      "Contr√¥le de version avec strat√©gie de branchement et fusions automatis√©es",
      "Contr√¥le de version avanc√© avec bascules de fonctionnalit√©s",
      "Contr√¥le de version sophistiqu√© avec conformit√© automatis√©e"
    ]
  },
  BM2: {
    text: "Int√©gration Continue",
    options: [
      "Aucune int√©gration continue",
      "Builds manuels avec tests de base",
      "Pipeline CI automatis√© avec tests unitaires",
      "CI avanc√© avec tests d'int√©gration et d√©ploiement",
      "CI optimis√© par IA avec pr√©diction de qualit√©"
    ]
  },
  BM3: {
    text: "Gestion des Artefacts",
    options: [
      "Aucune gestion d'artefacts",
      "Stockage basique des artefacts",
      "R√©f√©rentiel d'artefacts avec versioning",
      "Gestion avanc√©e avec m√©tadonn√©es et tra√ßabilit√©",
      "Optimisation IA de la gestion d'artefacts"
    ]
  },
  BM4: {
    text: "Gestion des D√©pendances",
    options: [
      "Aucune gestion des d√©pendances",
      "Gestion manuelle des d√©pendances",
      "Gestion automatis√©e avec r√©solution de conflits",
      "Analyse avanc√©e des vuln√©rabilit√©s",
      "Optimisation IA des d√©pendances"
    ]
  },
  BM5: {
    text: "Qualit√© du Code",
    options: [
      "Aucune v√©rification de qualit√©",
      "Revues de code manuelles",
      "Analyse statique automatis√©e",
      "M√©triques de qualit√© avec seuils",
      "Am√©lioration IA de la qualit√©"
    ]
  },
  BM6: {
    text: "Gestion de la Configuration de Build",
    options: [
      "Configuration de build manuelle",
      "Scripts de build basiques",
      "Configuration comme code",
      "Builds reproductibles avec cache",
      "Optimisation IA des builds"
    ]
  },

  // Environments & Provisioning
  ENV1: {
    text: "Provisionnement d'Infrastructure",
    options: [
      "Provisionnement manuel",
      "Scripts d'automatisation basiques",
      "Infrastructure comme Code (IaC)",
      "Provisionnement auto-r√©parant",
      "Infrastructure adaptative par IA"
    ]
  },
  ENV2: {
    text: "Gestion des Environnements",
    options: [
      "Environnements g√©r√©s manuellement",
      "Environnements standardis√©s",
      "Environnements √† la demande",
      "Environnements √©ph√©m√®res automatis√©s",
      "Optimisation IA des environnements"
    ]
  },
  ENV3: {
    text: "Gestion de la Configuration",
    options: [
      "Configuration manuelle",
      "Fichiers de configuration centralis√©s",
      "Gestion automatis√©e de la configuration",
      "Configuration avec validation et rollback",
      "Configuration adaptative par IA"
    ]
  },
  ENV4: {
    text: "Surveillance de l'Infrastructure",
    options: [
      "Aucune surveillance",
      "Surveillance basique des m√©triques",
      "Surveillance automatis√©e avec alertes",
      "Surveillance pr√©dictive",
      "Surveillance autonome par IA"
    ]
  },
  ENV5: {
    text: "S√©curit√© de l'Infrastructure",
    options: [
      "S√©curit√© basique",
      "Politiques de s√©curit√© d√©finies",
      "S√©curit√© automatis√©e avec scanning",
      "S√©curit√© proactive avec rem√©diation",
      "S√©curit√© adaptative par IA"
    ]
  },
  ENV6: {
    text: "R√©cup√©ration apr√®s Sinistre",
    options: [
      "Aucun plan de r√©cup√©ration",
      "Sauvegardes manuelles",
      "R√©cup√©ration automatis√©e",
      "R√©cup√©ration g√©o-distribu√©e",
      "R√©cup√©ration pr√©dictive par IA"
    ]
  },

  // Application Architecture
  APP1: {
    text: "Architecture d'Application",
    options: [
      "Architecture monolithique",
      "Architecture modulaire de base",
      "Architecture microservices",
      "Architecture cloud-native",
      "Architecture auto-adaptative"
    ]
  },
  APP2: {
    text: "D√©couplage des Services",
    options: [
      "Services √©troitement coupl√©s",
      "D√©couplage basique",
      "Services faiblement coupl√©s",
      "Architecture √©v√©nementielle",
      "Orchestration IA des services"
    ]
  },
  APP3: {
    text: "Gestion des API",
    options: [
      "Aucune gestion d'API",
      "APIs document√©es",
      "Passerelle API avec versioning",
      "Gestion compl√®te du cycle de vie API",
      "APIs auto-√©volutives par IA"
    ]
  },
  APP4: {
    text: "R√©silience de l'Application",
    options: [
      "Aucune r√©silience",
      "Gestion basique des erreurs",
      "Patterns de r√©silience (circuit breaker, retry)",
      "Auto-gu√©rison et tol√©rance aux pannes",
      "R√©silience pr√©dictive par IA"
    ]
  },
  APP5: {
    text: "√âvolutivit√©",
    options: [
      "√âvolutivit√© manuelle",
      "√âvolutivit√© verticale",
      "√âvolutivit√© horizontale automatique",
      "√âvolutivit√© √©lastique",
      "√âvolutivit√© pr√©dictive par IA"
    ]
  },
  APP6: {
    text: "Gestion d'√âtat",
    options: [
      "√âtat g√©r√© localement",
      "√âtat centralis√©",
      "√âtat distribu√©",
      "√âtat r√©pliqu√© avec coh√©rence",
      "Gestion d'√©tat optimis√©e par IA"
    ]
  }
};

async function addFrenchTranslations() {
  const client = new MongoClient(mongoUri);
  
  try {
    await client.connect();
    console.log('Connected to MongoDB');
    
    const db = client.db(dbName);
    const collection = db.collection('questions');
    
    let updatedCount = 0;
    
    // Update each question with French translations
    for (const [questionId, frenchData] of Object.entries(frenchTranslations)) {
      const result = await collection.updateOne(
        { id: questionId },
        {
          $set: {
            'text.fr_CA': frenchData.text,
            'options.$[].text.fr_CA': frenchData.options[0], // This won't work for arrays
            updatedAt: new Date()
          }
        }
      );
      
      if (result.matchedCount > 0) {
        // Update options individually since MongoDB doesn't support array updates easily
        const question = await collection.findOne({ id: questionId });
        if (question && question.options) {
          const updatedOptions = question.options.map((option, index) => ({
            ...option,
            text: {
              ...option.text,
              fr_CA: frenchData.options[index] || option.text.en_CA
            }
          }));
          
          await collection.updateOne(
            { id: questionId },
            {
              $set: {
                'text.fr_CA': frenchData.text,
                options: updatedOptions,
                updatedAt: new Date()
              }
            }
          );
          
          updatedCount++;
          console.log(`‚úÖ Updated ${questionId}: ${frenchData.text}`);
        }
      } else {
        console.log(`‚ùå Question ${questionId} not found`);
      }
    }
    
    console.log(`\nüéâ Successfully updated ${updatedCount} questions with French translations`);
    
    // Verify a sample
    const sample = await collection.findOne({ id: 'BM1' });
    console.log('\nüìã Sample verification:');
    console.log('EN:', sample.text.en_CA);
    console.log('FR:', sample.text.fr_CA);
    console.log('Option 1 EN:', sample.options[0].text.en_CA);
    console.log('Option 1 FR:', sample.options[0].text.fr_CA);
    
  } catch (error) {
    console.error('‚ùå Error updating translations:', error);
  } finally {
    await client.close();
    console.log('\nüîå MongoDB connection closed');
  }
}

// Run the script
addFrenchTranslations();
